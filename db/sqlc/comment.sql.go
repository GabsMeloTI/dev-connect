// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comment.sql

package db

import (
	"context"
	"database/sql"
)

const createComment = `-- name: CreateComment :one
INSERT INTO public."Comment"
(id, user_id, post_id, "content", likes, created_at)
VALUES(nextval('"Comment_id_seq"'::regclass), $1, $2, $3, 0, now())
    RETURNING id, user_id, post_id, content, likes, created_at
`

type CreateCommentParams struct {
	UserID  int64  `json:"user_id"`
	PostID  int64  `json:"post_id"`
	Content string `json:"content"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.UserID, arg.PostID, arg.Content)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PostID,
		&i.Content,
		&i.Likes,
		&i.CreatedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM public."Comment"
WHERE id=$1
`

func (q *Queries) DeleteComment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteComment, id)
	return err
}

const getAllComments = `-- name: GetAllComments :many
SELECT id, user_id, post_id, content, likes, created_at
FROM "Comment"
`

func (q *Queries) GetAllComments(ctx context.Context) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getAllComments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PostID,
			&i.Content,
			&i.Likes,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComment = `-- name: UpdateComment :one
UPDATE public."Comment"
SET "content"=$2
WHERE id=$1
    RETURNING id, user_id, post_id, content, likes, created_at
`

type UpdateCommentParams struct {
	ID      int64  `json:"id"`
	Content string `json:"content"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, updateComment, arg.ID, arg.Content)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PostID,
		&i.Content,
		&i.Likes,
		&i.CreatedAt,
	)
	return i, err
}

const updateCommentLikes = `-- name: UpdateCommentLikes :one
UPDATE public."Comment"
SET likes=$2
WHERE id=$1
    RETURNING id, user_id, post_id, content, likes, created_at
`

type UpdateCommentLikesParams struct {
	ID    int64         `json:"id"`
	Likes sql.NullInt64 `json:"likes"`
}

func (q *Queries) UpdateCommentLikes(ctx context.Context, arg UpdateCommentLikesParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, updateCommentLikes, arg.ID, arg.Likes)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PostID,
		&i.Content,
		&i.Likes,
		&i.CreatedAt,
	)
	return i, err
}
