// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: post.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const archivePost = `-- name: ArchivePost :exec
UPDATE "Post"
SET archive=true
WHERE id=$1
`

func (q *Queries) ArchivePost(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, archivePost, id)
	return err
}

const createPost = `-- name: CreatePost :one
INSERT INTO public."Post"
(id, user_id, "content", image_url, likes, shares, created_at, archive)
VALUES(nextval('"Post_id_seq"'::regclass), $1, $2, $3, 0, 0, now(), false)
    RETURNING id, user_id, content, image_url, likes, shares, archive, created_at
`

type CreatePostParams struct {
	UserID   int64          `json:"user_id"`
	Content  string         `json:"content"`
	ImageUrl sql.NullString `json:"image_url"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost, arg.UserID, arg.Content, arg.ImageUrl)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.ImageUrl,
		&i.Likes,
		&i.Shares,
		&i.Archive,
		&i.CreatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM public."Post"
WHERE id=$1
`

func (q *Queries) DeletePost(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getAllPosts = `-- name: GetAllPosts :many
SELECT p.id,
       p."content",
       p.image_url,
       p.likes,
       p.shares,
       p.created_at,
       p.archive,
       p.user_id,
       u.name,
       u.avatar_url
FROM "Post" p
         INNER JOIN "User" u ON u.id = p.user_id
WHERE p.archive = true
`

type GetAllPostsRow struct {
	ID        int64          `json:"id"`
	Content   string         `json:"content"`
	ImageUrl  sql.NullString `json:"image_url"`
	Likes     sql.NullInt32  `json:"likes"`
	Shares    sql.NullInt32  `json:"shares"`
	CreatedAt time.Time      `json:"created_at"`
	Archive   bool           `json:"archive"`
	UserID    int64          `json:"user_id"`
	Name      string         `json:"name"`
	AvatarUrl sql.NullString `json:"avatar_url"`
}

func (q *Queries) GetAllPosts(ctx context.Context) ([]GetAllPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPostsRow
	for rows.Next() {
		var i GetAllPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.ImageUrl,
			&i.Likes,
			&i.Shares,
			&i.CreatedAt,
			&i.Archive,
			&i.UserID,
			&i.Name,
			&i.AvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPostsByUser = `-- name: GetAllPostsByUser :many
SELECT
    p.id,
    p."content",
    p.image_url,
    p.likes,
    p.shares,
    p.created_at,
    p.archive,
    p.user_id,
    u.name,
    u.avatar_url
FROM "Post" p
    INNER JOIN "User" u ON u.id = p.user_id
WHERE user_id=$1
`

type GetAllPostsByUserRow struct {
	ID        int64          `json:"id"`
	Content   string         `json:"content"`
	ImageUrl  sql.NullString `json:"image_url"`
	Likes     sql.NullInt32  `json:"likes"`
	Shares    sql.NullInt32  `json:"shares"`
	CreatedAt time.Time      `json:"created_at"`
	Archive   bool           `json:"archive"`
	UserID    int64          `json:"user_id"`
	Name      string         `json:"name"`
	AvatarUrl sql.NullString `json:"avatar_url"`
}

func (q *Queries) GetAllPostsByUser(ctx context.Context, userID int64) ([]GetAllPostsByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllPostsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPostsByUserRow
	for rows.Next() {
		var i GetAllPostsByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.ImageUrl,
			&i.Likes,
			&i.Shares,
			&i.CreatedAt,
			&i.Archive,
			&i.UserID,
			&i.Name,
			&i.AvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE public."Post"
SET "content"=$2, image_url=$3
WHERE id=$1
    RETURNING id, user_id, content, image_url, likes, shares, archive, created_at
`

type UpdatePostParams struct {
	ID       int64          `json:"id"`
	Content  string         `json:"content"`
	ImageUrl sql.NullString `json:"image_url"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost, arg.ID, arg.Content, arg.ImageUrl)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.ImageUrl,
		&i.Likes,
		&i.Shares,
		&i.Archive,
		&i.CreatedAt,
	)
	return i, err
}
