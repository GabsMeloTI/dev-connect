// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: post.sql

package db

import (
	"context"
	"database/sql"
)

const archivePost = `-- name: ArchivePost :exec
UPDATE "Post"
SET archive=true
WHERE id=$1
`

func (q *Queries) ArchivePost(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, archivePost, id)
	return err
}

const createPost = `-- name: CreatePost :one
INSERT INTO public."Post"
(id, user_id, "content", image_url, likes, shares, created_at, archive)
VALUES(nextval('"Post_id_seq"'::regclass), $1, $2, $3, $4, $5, now(), false)
    RETURNING id, user_id, content, image_url, likes, shares, created_at
`

type CreatePostParams struct {
	UserID   sql.NullInt32  `json:"user_id"`
	Content  string         `json:"content"`
	ImageUrl sql.NullString `json:"image_url"`
	Likes    sql.NullInt32  `json:"likes"`
	Shares   sql.NullInt32  `json:"shares"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.UserID,
		arg.Content,
		arg.ImageUrl,
		arg.Likes,
		arg.Shares,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.ImageUrl,
		&i.Likes,
		&i.Shares,
		&i.CreatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM public."Post"
WHERE id=$1
`

func (q *Queries) DeletePost(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getAllPosts = `-- name: GetAllPosts :many
SELECT id, user_id, content, image_url, likes, shares, created_at
FROM "Post"
`

func (q *Queries) GetAllPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getAllPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.ImageUrl,
			&i.Likes,
			&i.Shares,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE public."Post"
SET "content"=$2, image_url=$3
WHERE id=$1
    RETURNING id, user_id, content, image_url, likes, shares, created_at
`

type UpdatePostParams struct {
	ID       int32          `json:"id"`
	Content  string         `json:"content"`
	ImageUrl sql.NullString `json:"image_url"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost, arg.ID, arg.Content, arg.ImageUrl)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.ImageUrl,
		&i.Likes,
		&i.Shares,
		&i.CreatedAt,
	)
	return i, err
}
