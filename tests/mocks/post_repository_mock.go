// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/postRepository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/postRepository.go -destination=tests/mocks/post_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	sqlc "treads/db/sqlc"

	gomock "go.uber.org/mock/gomock"
)

// MockPostInterface is a mock of PostInterface interface.
type MockPostInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPostInterfaceMockRecorder
	isgomock struct{}
}

// MockPostInterfaceMockRecorder is the mock recorder for MockPostInterface.
type MockPostInterfaceMockRecorder struct {
	mock *MockPostInterface
}

// NewMockPostInterface creates a new mock instance.
func NewMockPostInterface(ctrl *gomock.Controller) *MockPostInterface {
	mock := &MockPostInterface{ctrl: ctrl}
	mock.recorder = &MockPostInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostInterface) EXPECT() *MockPostInterfaceMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockPostInterface) CreatePost(arg0 context.Context, arg1 sqlc.CreatePostParams) (sqlc.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostInterfaceMockRecorder) CreatePost(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostInterface)(nil).CreatePost), arg0, arg1)
}

// DeletePost mocks base method.
func (m *MockPostInterface) DeletePost(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostInterfaceMockRecorder) DeletePost(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostInterface)(nil).DeletePost), arg0, arg1)
}

// GetAllPosts mocks base method.
func (m *MockPostInterface) GetAllPosts(arg0 context.Context) ([]sqlc.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPosts", arg0)
	ret0, _ := ret[0].([]sqlc.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts.
func (mr *MockPostInterfaceMockRecorder) GetAllPosts(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockPostInterface)(nil).GetAllPosts), arg0)
}

// UpdatePost mocks base method.
func (m *MockPostInterface) UpdatePost(arg0 context.Context, arg1 sqlc.UpdatePostParams) (sqlc.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockPostInterfaceMockRecorder) UpdatePost(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockPostInterface)(nil).UpdatePost), arg0, arg1)
}
